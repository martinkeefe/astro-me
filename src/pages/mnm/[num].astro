---
import { MNMS, type MNM } from "@app";
import { mnm_data, type MNMTrack } from "../../lib/mnm";
import NormalPage from "@components/NormalPage.astro";

const { num } = Astro.params;

const S3 = "http://s3-eu-west-1.amazonaws.com/raiment57/";

function s3_src(mnm: MNM, i: number, ext: string) {
  const trk_num = ("0" + (i + 1)).slice(-2);
  return `${S3}mnm${mnm.num}/${trk_num}.${ext}`;
}

const mnm = MNMS.find((m) => m.num == num) ?? MNMS[1];
const data = mnm_data(Number(num));
---

<NormalPage
  title={"Monday Night Martin - " + mnm.title}
  date={mnm.date}
  ident="mnm"
>
  <h1>Monday Night Martin</h1>
  <p>
    Once upon a time I lugged my PC to The Star on the first Monday of each
    month to play lovingly created playlists as loudly as I could get away with
    accompanied by swirling visuals generated by <a
      href="https://en.wikipedia.org/wiki/Winamp">WinAmp</a
    >’s <a href="https://en.wikipedia.org/wiki/MilkDrop">MilkDrop</a> plugin projected
    on to a screen. This had something of a cult following for a few years.
  </p>
  <h2>#{mnm.num}: {data.name}</h2>
  <p set:html={data.desc ?? ""} />
  <audio controls></audio>
  <div class="playlist" data-num={num}>
    {
      data.tracks.map((track, i) => (
        <div class="item" onclick="">
          <img src={s3_src(mnm, i, "jpg")} />
          <div class="data">
            <p>
              <big>{i + 1}</big>
            </p>
            <p>
              <b>{track.art_name}</b>
            </p>
            <p>“{track.trk_name}”</p>
            <p>
              <i>{track.alb_name}</i>, {track.alb_year}
            </p>
          </div>
        </div>
      ))
    }
  </div>
</NormalPage>

<script>
  const S3 = "http://s3-eu-west-1.amazonaws.com/raiment57/";

  const playlist = document.querySelector<HTMLDivElement>(".playlist")!;
  const audio = document.querySelector<HTMLAudioElement>("audio")!;
  const items = document.querySelectorAll<HTMLDivElement>(".item");
  let track_num = 0;

  const s3_src = (i: number, ext: string) => {
    const trk_num = ("0" + (i + 1)).slice(-2);
    return `${S3}mnm${playlist.dataset["num"]}/${trk_num}.${ext}`;
  };

  const set_track = (i: number) => {
    track_num = i;
    items.forEach((item) => item.classList.remove("active"));
    items[i].classList.add("active");
    audio.src = s3_src(i, "mp3");
    audio.play();
  };

  items.forEach((item, idx) => {
    item.onclick = () => {
      set_track(idx);
    };
  });

  audio.onended = () => {
    if (track_num < items.length) set_track(track_num + 1);
  };

  set_track(0);
</script>

<style>
  .playlist {
    -display: flex;
    -flex-wrap: wrap;
    margin: -1em 0 1em -1em; /* gutter */
  }

  .playlist .item {
    -width: 50%;
    padding: 1em 0 0 1em; /* gutter */
    display: flex;
    position: relative;
  }

  .playlist .item p {
    margin: 0;
  }
  .playlist .item img {
    width: 144px;
    height: 144px;
    -flex: 1;
  }
  .playlist .item .data {
    flex: 2;
    padding-left: 0.5em;
  }
  .playlist .item .data p {
    text-align: left;
  }

  .playlist .item.active {
    background: rgba(45, 103, 209, 0.664);
  }

  audio {
    width: 100%;
    position: sticky;
    /* position: absolute; */
    /* left: 0; */
    top: 0.5em;
    /* padding-left: 1em; */
    margin-bottom: 1rem;
    z-index: 1;
  }

  @media only screen and (min-width: 43em) {
    .playlist {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin: 0;
    }

    .playlist .item {
      /* width: 50%; */
      padding: 0;
    }
  }
</style>
